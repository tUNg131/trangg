[{"/Users/lexuantung/Documents/projects/trangg/src/index.js":"1","/Users/lexuantung/Documents/projects/trangg/src/reportWebVitals.js":"2","/Users/lexuantung/Documents/projects/trangg/src/App.js":"3","/Users/lexuantung/Documents/projects/trangg/src/components/img.js":"4","/Users/lexuantung/Documents/projects/trangg/src/components/popup.js":"5","/Users/lexuantung/Documents/projects/trangg/src/components/btn.js":"6","/Users/lexuantung/Documents/projects/trangg/src/components/snowflake.js":"7"},{"size":500,"mtime":1608836074860,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1608836074861,"results":"10","hashOfConfig":"9"},{"size":3746,"mtime":1609375791636,"results":"11","hashOfConfig":"9"},{"size":1639,"mtime":1609203552307,"results":"12","hashOfConfig":"13"},{"size":712,"mtime":1609113996912,"results":"14","hashOfConfig":"9"},{"size":946,"mtime":1609114383231,"results":"15","hashOfConfig":"9"},{"size":4751,"mtime":1609374493347,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"xcx2hp",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ifztt5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"19"},"/Users/lexuantung/Documents/projects/trangg/src/index.js",[],["34","35"],"/Users/lexuantung/Documents/projects/trangg/src/reportWebVitals.js",[],"/Users/lexuantung/Documents/projects/trangg/src/App.js",["36"],"import React from 'react';\nimport PopUp from './components/popup';\nimport { Button, PopUpButton } from './components/btn';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport './App.css';\nimport './components/img.css';\nimport './components/animation.css';\n\nimport heart from './static/heart-icon1.png';\nimport axios from 'axios';\n\nimport { SnowFall } from './components/snowflake';\n\nfunction getRandomInt(max) {\n  const sign = (Math.random() > 0.5) ? -1 : 1;\n  return Math.floor(Math.random() * Math.floor(max)) * sign;\n}\n\nasync function getNewCachedImgSrc() {\n  try {\n    axios.defaults.headers.common['x-api-key'] = \"b3921cad-6daf-47e5-b6b9-6d6f8d241d59\"\n\n    let response = await axios.get('https://api.thecatapi.com/v1/images/search', { params: { limit:5, size:\"full\" } })\n\n    const srcList = response.data.map((image) => {\n      new Image().src = image.url\n      return {src: image.url, id: image.id, height: image.height, width: image.width}\n    });\n    return srcList\n  } catch(err) {\n    console.log(err)\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      srcList: [],\n      angle: getRandomInt(15),\n      showPopUp: false,\n      buttonEnabled: true,\n      snow: false\n    }\n    this.togglePopUp = this.togglePopUp.bind(this);\n    this.newImage = this.newImage.bind(this);\n  }\n\n  togglePopUp() {\n    this.setState({\n      showPopUp: !this.state.showPopUp\n    });\n  }\n\n  newImage() {\n    this.setState({buttonEnabled: false}, // disable button before doing anything else\n      () => {\n        var modifiedList = [...this.state.srcList];\n        modifiedList.shift();\n        this.setState({srcList: modifiedList, angle: getRandomInt(15)}, \n          () => {this.setState({buttonEnabled: true}); // enable the button again\n        });\n      });\n  }\n\n  async fillSrcList() {\n    const lowerLimit = 5;\n    const {srcList} = this.state;\n    if(srcList.length < lowerLimit) {\n      this.setState({srcList: [...srcList, ...await getNewCachedImgSrc()]})\n      this.fillSrcList();\n    }\n  }\n\n  componentDidMount() {\n    this.fillSrcList();\n  }\n\n  componentDidUpdate() {\n    this.fillSrcList();\n  }\n\n  render() {\n      const {srcList, showPopUp, angle, buttonEnabled} = this.state;\n      var hasImage = true;\n      if (srcList === undefined || srcList.length === 0) {\n        hasImage = false;\n      }\n\n      return(\n        <div className=\"App\">\n\n          <SnowFall />\n\n          { (hasImage) ?\n            <TransitionGroup className=\"image-container\">\n              <CSSTransition\n                key={`image-${srcList[0].id}`} // to trigger transition everytime it updates\n                timeout={700}\n                classNames=\"image\"\n                unmountOnExit\n              >\n                <img \n                  className=\"image\" \n                  src={srcList[0].src} \n                  alt=\"cute cat\" \n                  style={{\n                    width: (srcList[0].width >= srcList[0].height) ? '60vw': undefined,\n                    height: (srcList[0].width < srcList[0].height) ? '60vh': undefined,\n                    transform: `translate(-50%, -50%) rotate(${angle}deg)`\n                  }}\n                  onClick={(buttonEnabled) ? this.newImage: null} \n                />\n              </CSSTransition>\n            </TransitionGroup> : null\n          }\n\n          <PopUp show={showPopUp}>\n            <h1>This is the PopUp!</h1>\n            <Button addClass=\"close-pop-up hoverable\" onClick={this.togglePopUp}>\n              <img src={heart} style={{width: \"50px\"}} />\n            </Button>\n          </PopUp>\n          <PopUpButton in={!showPopUp} onClick={this.togglePopUp} />\n        </div>\n      )\n  }\n}\n\nexport default App;","/Users/lexuantung/Documents/projects/trangg/src/components/img.js",[],"/Users/lexuantung/Documents/projects/trangg/src/components/popup.js",[],"/Users/lexuantung/Documents/projects/trangg/src/components/btn.js",[],"/Users/lexuantung/Documents/projects/trangg/src/components/snowflake.js",["37"],"import { Component } from \"react\";\nimport { Transition, TransitionGroup } from \"react-transition-group\";\n\nimport snowFlake1 from '../static/snowFlake1.png';\nimport snowFlake2 from '../static/snowFlake2.png';\nimport './snow.css';\n\nimport {v4 as uuid} from 'uuid';\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nclass SnowFlake extends Component {\n    src = ''\n\n    constructor(props) {\n        super(props);\n\n        this.Img = null;\n        this.setImgRef = element => {\n            this.Img = element\n        };\n    }\n\n    getStyle(state) {\n        const {duration, left, scale, spin} = this.props;\n        const height = 71*(scale || 1); //default height = 71px\n\n        const defaultStyle = {\n            position: \"absolute\",\n            left: left,\n            top: `-${height}px`, // offset == height\n            height: `${height}px`,\n            zIndex: 1\n        }\n\n        const addStyle = {\n            entering: {\n                transform: `translateY(100vh) rotate(${spin*duration}deg)`, // spin is the angular speed\n                opacity: 1,\n                transition: `transform ${duration}ms linear`\n            }, //move to the bottom\n            entered: {\n                transform: `translateY(100vh) rotate(${spin*duration}deg)`, // spin is the angular speed\n                opacity: 1,\n                transition: `transform ${duration}ms linear` \n            }, \n            exiting: {\n                transform: this.getCurrentTransform(), // not a good solution because will make it glitches\n                opacity: 0,\n                transition: 'transform 300ms, opacity 700ms ease-in-out'\n            }, //start melting\n            exited: {\n                opacity: 0,\n                transform: 'rotate(0deg)', \n            } //when inProp = false\n        }\n\n        return {...defaultStyle, ...addStyle[state]}\n    }\n\n    getCurrentTransform() {\n        return (this.Img &&\n            getComputedStyle(this.Img).getPropertyValue(\"transform\"))\n    }\n\n    render() {\n        const {in: inProp, toggle: toggle, duration} = this.props\n        return(\n            <Transition \n                in={inProp} \n                timeout={{\n                    appear: 0,\n                    enter: duration,\n                    exit: 700\n                }}\n                onEntered={toggle}\n            >\n                {state => (\n                    <img\n                        ref={this.setImgRef}\n                        src={this.src}\n                        alt=\"Snow flake\"\n                        style={this.getStyle(state)}\n                        onClick={toggle}\n                    />\n                )}\n            </Transition>\n        )\n    }\n}\n\nexport class SnowFlake1 extends SnowFlake {\n    src = snowFlake1\n}\n\nexport class SnowFlake2 extends SnowFlake {\n    src = snowFlake2\n}\n\nexport class SnowFall extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.createItem = this.createItem.bind(this);\n        this.state = {\n            items: []\n        }\n    }\n\n    createItem() {\n        // console.log(this.state.items);\n        this.setState({items: [\n            ...this.state.items,\n            {\n                id: uuid(),\n                duration: getRandomInt(5000, 15000), // get random duration\n                scale: getRandomArbitrary(0.5, 2), // get random scale\n                spin: getRandomInt(100, 200),// get random spin\n                left: `${getRandomInt(2, 98)}%`// get random left\n            }\n        ]}, () => {\n            setTimeout(this.createItem, 1000)\n        })\n    }\n\n\n    toggle(id) {// get rid of the item with \"id\" from the list\n        var items = [...this.state.items];\n        // console.log(id);\n        this.setState({items: items.filter(item => !(item.id === id))})\n    }\n\n    componentDidMount() {\n        this.createItem();\n    }\n\n    render() {\n        const {items} = this.state;\n        return(\n            <TransitionGroup className=\"snow-fall\">\n                {items.map(({id, duration, scale, spin, left}) => (\n                    <SnowFlake1\n                        key={id}\n                        toggle={() => {\n                            this.toggle(id)\n                        }}\n                        duration={duration}\n                        scale={scale}\n                        spin={spin}\n                        left={left}\n                    />\n                ))}\n            </TransitionGroup>\n        )\n    }\n}\n\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":122,"column":15,"nodeType":"44","endLine":122,"endColumn":58},{"ruleId":"45","severity":1,"message":"46","line":75,"column":28,"nodeType":"47","messageId":"48","endLine":75,"endColumn":42,"fix":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-rename","Destructuring assignment toggle unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"52","text":"53"},"no-global-assign","no-unsafe-negation",[2276,2290],"toggle"]